#!/usr/bin/env python3
"""
Basit SNMP Agent - Sadece Okuma
Deƒüi≈ükenlerde tutulan deƒüerleri SNMP ile sun
"""

import sys
import time
import datetime
from pysnmp.entity import engine, config
from pysnmp.entity.rfc3413 import cmdrsp, context
from pysnmp.carrier.asyncio.dgram import udp
from pysnmp.proto.api import v2c

# RAM'de deƒüer tutma sistemi
from collections import defaultdict
battery_data_ram = defaultdict(dict)

def update_battery_data_ram(arm, k, dtype, value):
    """RAM'deki batarya verilerini g√ºncelle"""
    if arm not in battery_data_ram:
        battery_data_ram[arm] = {}
    if k not in battery_data_ram[arm]:
        battery_data_ram[arm][k] = {}
    
    battery_data_ram[arm][k][dtype] = {
        'value': value,
        'timestamp': int(time.time() * 1000)
    }

def get_battery_data_ram(arm=None, k=None, dtype=None):
    """RAM'den batarya verilerini oku"""
    if arm is None:
        return dict(battery_data_ram)
    elif k is None:
        return dict(battery_data_ram.get(arm, {}))
    elif dtype is None:
        return dict(battery_data_ram.get(arm, {}).get(k, {}))
    else:
        return battery_data_ram.get(arm, {}).get(k, {}).get(dtype, None)

# Test verileri ekle
update_battery_data_ram(1, 3, 10, 12.5)  # arm=1, k=3, dtype=10, value=12.5
update_battery_data_ram(1, 3, 11, 2.3)   # arm=1, k=3, dtype=11, value=2.3
update_battery_data_ram(1, 3, 12, 25.0)  # arm=1, k=3, dtype=12, value=25.0
update_battery_data_ram(2, 4, 10, 13.2)  # arm=2, k=4, dtype=10, value=13.2
update_battery_data_ram(2, 4, 11, 1.8)   # arm=2, k=4, dtype=11, value=1.8
update_battery_data_ram(2, 4, 12, 28.5)  # arm=2, k=4, dtype=12, value=28.5

def start_basic_snmp_agent():
    """Basit SNMP Agent ba≈ülat - Sadece okuma"""
    print("üöÄ Basit SNMP Agent Ba≈ülatƒ±lƒ±yor...")
    print("üìä Sadece Okuma - Deƒüi≈üken Deƒüerleri")
    print("=" * 50)
    
    try:
        # Create SNMP engine
        snmpEngine = engine.SnmpEngine()
        print("‚úÖ SNMP Engine olu≈üturuldu")

        # Transport setup - UDP over IPv4
        config.add_transport(
            snmpEngine, udp.DOMAIN_NAME, udp.UdpTransport().open_server_mode(("127.0.0.1", 1161))
        )
        print("‚úÖ Transport ayarlandƒ±")

        # SNMPv2c setup
        config.add_v1_system(snmpEngine, "my-area", "public")
        print("‚úÖ SNMPv2c ayarlandƒ±")

        # Allow read MIB access for this user / securityModels at VACM
        config.add_vacm_user(snmpEngine, 2, "my-area", "noAuthNoPriv", (1, 3, 6, 5))
        print("‚úÖ VACM ayarlandƒ±")

        # Create an SNMP context
        snmpContext = context.SnmpContext(snmpEngine)
        print("‚úÖ SNMP Context olu≈üturuldu")

        # --- create custom Managed Object Instance ---
        mibBuilder = snmpContext.get_mib_instrum().get_mib_builder()

        MibScalar, MibScalarInstance = mibBuilder.import_symbols(
            "SNMPv2-SMI", "MibScalar", "MibScalarInstance"
        )
        print("‚úÖ MIB Builder olu≈üturuldu")

        class BasicMibScalarInstance(MibScalarInstance):
            """Basit MIB Instance - RAM'den okuma"""
            def getValue(self, name, **context):
                oid = '.'.join([str(x) for x in name])
                print(f"üîç MIB OID sorgusu: {oid}")
                
                # Sistem bilgileri
                if oid == "1.3.6.5.1.0":
                    return self.getSyntax().clone(
                        f"Python {sys.version} running on a {sys.platform} platform"
                    )
                elif oid == "1.3.6.5.2.0":  # totalBatteryCount
                    data = get_battery_data_ram()
                    battery_count = 0
                    for arm in data.keys():
                        for k in data[arm].keys():
                            if k > 2:  # k>2 olanlar batarya verisi
                                battery_count += 1
                    return self.getSyntax().clone(str(battery_count if battery_count > 0 else 1))
                elif oid == "1.3.6.5.3.0":  # totalArmCount
                    data = get_battery_data_ram()
                    return self.getSyntax().clone(str(len(data) if data else 2))
                elif oid == "1.3.6.5.4.0":  # systemStatus
                    return self.getSyntax().clone("1")
                elif oid == "1.3.6.5.5.0":  # lastUpdateTime
                    return self.getSyntax().clone(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                elif oid == "1.3.6.5.6.0":  # dataCount
                    data = get_battery_data_ram()
                    return self.getSyntax().clone(str(sum(len(data[arm]) for arm in data) if data else 6))
                else:
                    # Ger√ßek batarya verileri - RAM'den oku
                    if oid.startswith("1.3.6.5.10."):
                        parts = oid.split('.')
                        if len(parts) >= 6:
                            arm = int(parts[4])
                            k = int(parts[5])
                            dtype = int(parts[6]) if len(parts) > 6 else 0
                            
                            data = get_battery_data_ram(arm, k, dtype)
                            if data:
                                return self.getSyntax().clone(str(data['value']))
                            return self.getSyntax().clone("0")
                    
                    return self.getSyntax().clone("No Such Object")

        # MIB Objects olu≈ütur
        mibBuilder.export_symbols(
            "__BASIC_MIB",
            # Sistem bilgileri
            MibScalar((1, 3, 6, 5, 1), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 1), (0,), v2c.OctetString()),
            
            MibScalar((1, 3, 6, 5, 2), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 2), (0,), v2c.OctetString()),
            
            MibScalar((1, 3, 6, 5, 3), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 3), (0,), v2c.OctetString()),
            
            MibScalar((1, 3, 6, 5, 4), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 4), (0,), v2c.OctetString()),
            
            MibScalar((1, 3, 6, 5, 5), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 5), (0,), v2c.OctetString()),
            
            MibScalar((1, 3, 6, 5, 6), v2c.OctetString()),
            BasicMibScalarInstance((1, 3, 6, 5, 6), (0,), v2c.OctetString()),
        )
        
        # Batarya verileri i√ßin MIB Objects - Dinamik olarak olu≈ütur
        for arm in range(1, 4):  # 1, 2, 3
            for k in range(3, 6):  # 3, 4, 5
                for dtype in range(10, 13):  # 10, 11, 12
                    oid = (1, 3, 6, 5, 10, arm, k, dtype)
                    mibBuilder.export_symbols(
                        f"__BATTERY_MIB_{arm}_{k}_{dtype}",
                        MibScalar(oid, v2c.OctetString()),
                        BasicMibScalarInstance(oid, (0,), v2c.OctetString()),
                    )
        print("‚úÖ MIB Objects olu≈üturuldu")

        # --- end of Managed Object Instance initialization ----

        # Register SNMP Applications at the SNMP engine for particular SNMP context
        cmdrsp.GetCommandResponder(snmpEngine, snmpContext)
        cmdrsp.NextCommandResponder(snmpEngine, snmpContext)
        cmdrsp.BulkCommandResponder(snmpEngine, snmpContext)
        print("‚úÖ Command Responder'lar kaydedildi (GET/GETNEXT/GETBULK)")

        # Register an imaginary never-ending job to keep I/O dispatcher running forever
        snmpEngine.transport_dispatcher.job_started(1)
        print("‚úÖ Job ba≈ülatƒ±ldƒ±")

        print("üöÄ Basit SNMP Agent ba≈ülatƒ±lƒ±yor...")
        print("üì° Port 1161'de dinleniyor...")
        print("Ctrl+C ile durdurun")
        print("=" * 50)
        print("Test OID'leri:")
        print("1.3.6.5.1.0  - Python bilgisi")
        print("1.3.6.5.2.0  - Batarya sayƒ±sƒ±")
        print("1.3.6.5.3.0  - Kol sayƒ±sƒ±")
        print("1.3.6.5.4.0  - Sistem durumu")
        print("1.3.6.5.5.0  - Son g√ºncelleme")
        print("1.3.6.5.6.0  - Veri sayƒ±sƒ±")
        print("=" * 50)
        print("RAM'deki Batarya Verileri:")
        print("1.3.6.5.10.1.3.10.0  - Arm1, K3, Dtype10 (12.5)")
        print("1.3.6.5.10.1.3.11.0  - Arm1, K3, Dtype11 (2.3)")
        print("1.3.6.5.10.1.3.12.0  - Arm1, K3, Dtype12 (25.0)")
        print("1.3.6.5.10.2.4.10.0  - Arm2, K4, Dtype10 (13.2)")
        print("1.3.6.5.10.2.4.11.0  - Arm2, K4, Dtype11 (1.8)")
        print("1.3.6.5.10.2.4.12.0  - Arm2, K4, Dtype12 (28.5)")
        print("=" * 50)
        print("Test komutlarƒ±:")
        print("snmpget -v2c -c public localhost:1161 1.3.6.5.2.0")
        print("snmpget -v2c -c public localhost:1161 1.3.6.5.10.1.3.10.0")
        print("snmpget -v2c -c public localhost:1161 1.3.6.5.10.2.4.10.0")
        print("snmpwalk -v2c -c public localhost:1161 1.3.6.5")
        print("=" * 50)

        # Run I/O dispatcher which would receive queries and send responses
        try:
            snmpEngine.open_dispatcher()
        except:
            snmpEngine.close_dispatcher()
            raise
        
    except KeyboardInterrupt:
        print("\nüõë Basit SNMP Agent durduruluyor...")
        snmpEngine.close_dispatcher()
    except Exception as e:
        print(f"‚ùå Hata: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    start_basic_snmp_agent()
